const {
  EmbedBuilder,
  SlashCommandBuilder,
  ChannelType,
} = require("discord.js");
const { executeQuery } = require("../utils/database");
const config = require("../config");

async function fetchRankingData(client) {
  try {
    const now = new Date();
    const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);

    const result = await executeQuery(
      `SELECT u.username, u.total_points, u.userId
             FROM users u
             LEFT JOIN threads t ON u.userId = t.userId
             WHERE t.createdAt >= ?
             GROUP BY u.userId
             ORDER BY u.total_points DESC
             LIMIT 10`,
      [startOfMonth]
    );

    if (!result || result.length === 0) {
      return {
        noData: true,
        message: "‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu x·∫øp h·∫°ng th√°ng n√†y.",
      };
    }

    const botAvatar = client.user ? client.user.displayAvatarURL() : null;

    const embed = new EmbedBuilder()
      .setColor("#CF86CA")
      .setTitle(
        `üèÜ B·∫£ng X·∫øp H·∫°ng Th√°ng ${now.getMonth() + 1}/${now.getFullYear()}`
      )
      .setThumbnail(botAvatar)
      .setTimestamp()
      .setDescription(
        "üìä **Danh s√°ch top 10 ng∆∞·ªùi d√πng t√≠ch c·ª±c nh·∫•t th√°ng n√†y.**"
      );

    for (let i = 0; i < 10; i++) {
      if (result[i]) {
        const user = result[i];
        embed.addFields({
          name: `${i + 1}. ${user.username || "·∫®n danh"}`,
          value: `üéñ **ƒêi·ªÉm:** ${user.total_points}`,
          inline: false,
        });
      } else {
        embed.addFields({
          name: `${i + 1}. Tr·ªëng`,
          value: `üéñ **ƒêi·ªÉm:** 0`,
          inline: false,
        });
      }
    }

    const resetTime = new Date(now.getFullYear(), now.getMonth() + 1, 1) - now;
    const days = Math.floor(resetTime / (1000 * 60 * 60 * 24));
    const hours = Math.floor(
      (resetTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)
    );
    const minutes = Math.floor((resetTime % (1000 * 60 * 60)) / (1000 * 60));

    embed.setFooter({ text: `‚è≥ Reset sau: ${days}d ${hours}h ${minutes}m` });

    return { embeds: [embed] };
  } catch (error) {
    console.error("‚ùå [fetchRankingData] L·ªói:", error);
    return { error: true, message: "‚ùå C√≥ l·ªói x·∫£y ra khi l·∫•y b·∫£ng x·∫øp h·∫°ng." };
  }
}

async function handleRankingCommand(message, client) {
  return await fetchRankingData(client);
}

module.exports = {
  data: new SlashCommandBuilder()
    .setName("ranking-gpt")
    .setDescription("üìä Xem b·∫£ng x·∫øp h·∫°ng ng∆∞·ªùi d√πng trong th√°ng.")
    .setDMPermission(false),

  async execute(interaction) {
    await interaction.deferReply();
    const rankingData = await handleRankingCommand(
      interaction,
      interaction.client
    );
    await interaction.followUp(rankingData);
  },

  name: "ranking-gpt",
  description: "üìä Xem b·∫£ng x·∫øp h·∫°ng (prefix).",
  async executePrefix(message) {
    if (message.channel.type === ChannelType.DM) return;

    try {
      await message.channel.sendTyping();
      const rankingData = await handleRankingCommand(message, message.client);
      await message.channel.send(rankingData);
    } catch (error) {
      console.error("‚ùå [executePrefix] L·ªói khi th·ª±c hi·ªán ranking-gpt:", error);
      await message.channel.send("‚ùå ƒê√£ x·∫£y ra l·ªói khi l·∫•y b·∫£ng x·∫øp h·∫°ng.");
    }
  },

  handleRankingCommand,
};
