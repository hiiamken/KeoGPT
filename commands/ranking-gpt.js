const { EmbedBuilder, SlashCommandBuilder } = require("discord.js");
const { executeQuery } = require("../utils/database");

async function fetchRankingData() {
    try {

        const now = new Date();
        const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);

        const result = await executeQuery(
            `SELECT u.username, u.total_points, u.userId
             FROM users u
             LEFT JOIN threads t ON u.userId = t.userId
             WHERE t.createdAt >= ?
             GROUP BY u.userId
             ORDER BY u.total_points DESC
             LIMIT 10`,
            [startOfMonth]
        );

        if (!result || result.length === 0) {
            console.warn("‚ö†Ô∏è [fetchRankingData] Kh√¥ng c√≥ d·ªØ li·ªáu x·∫øp h·∫°ng.");
            return { noData: true, message: "‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu x·∫øp h·∫°ng th√°ng n√†y." };
        }


        const embed = new EmbedBuilder()
            .setColor("#CF86CA")
            .setTitle(`üèÜ BXH KeoGPT Th√°ng ${now.getMonth() + 1}/${now.getFullYear()}`)
            .setTimestamp()
            .setDescription("B·∫£ng x·∫øp h·∫°ng th√†nh vi√™n d·ª±a tr√™n t·ªïng s·ªë ƒëi·ªÉm t√≠ch l≈©y trong th√°ng.");

        for (let i = 0; i < 3; i++) {
            if (result[i]) {
                const user = result[i];
                let medal = i === 0 ? "ü•á" : i === 1 ? "ü•à" : "ü•â";
                embed.addFields({ name: `${medal} ${user.username}`, value: `**ƒêi·ªÉm:** ${user.total_points}`, inline: false });
            }
        }

        return { embeds: [embed] };
    } catch (error) {
        console.error("‚ùå [fetchRankingData] L·ªói:", error);
        return { error: true, message: "‚ùå C√≥ l·ªói x·∫£y ra khi l·∫•y b·∫£ng x·∫øp h·∫°ng." };
    }
}

async function handleRankingCommand(interaction) {

    const rankingData = await fetchRankingData();

    if (rankingData.error) {
        return { content: rankingData.message };
    }

    if (rankingData.noData) {
        return { content: rankingData.message };
    }

    return rankingData;
}

module.exports = {
    data: new SlashCommandBuilder()
        .setName("ranking-gpt")
        .setDescription("Xem b·∫£ng x·∫øp h·∫°ng ng∆∞·ªùi d√πng (theo th√°ng).")
        .setDMPermission(false),

    async execute(interaction) {

        await interaction.deferReply({ ephemeral: true });

        const rankingData = await handleRankingCommand(interaction);
        await interaction.followUp(rankingData);
    },

    handleRankingCommand, // ‚úÖ Export ƒë·ªÉ prefix command c√≥ th·ªÉ s·ª≠ d·ª•ng
};
